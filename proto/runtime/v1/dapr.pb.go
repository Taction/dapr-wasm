//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.1
// source: proto/runtime/v1/dapr.proto

package runtime

import (
	context "context"
	anypb "github.com/knqyf263/go-plugin/types/known/anypb"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	structpb "github.com/knqyf263/go-plugin/types/known/structpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UnlockResponse_Status int32

const (
	UnlockResponse_SUCCESS                UnlockResponse_Status = 0
	UnlockResponse_LOCK_DOES_NOT_EXIST    UnlockResponse_Status = 1
	UnlockResponse_LOCK_BELONGS_TO_OTHERS UnlockResponse_Status = 2
	UnlockResponse_INTERNAL_ERROR         UnlockResponse_Status = 3
)

// Enum value maps for UnlockResponse_Status.
var (
	UnlockResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "LOCK_DOES_NOT_EXIST",
		2: "LOCK_BELONGS_TO_OTHERS",
		3: "INTERNAL_ERROR",
	}
	UnlockResponse_Status_value = map[string]int32{
		"SUCCESS":                0,
		"LOCK_DOES_NOT_EXIST":    1,
		"LOCK_BELONGS_TO_OTHERS": 2,
		"INTERNAL_ERROR":         3,
	}
)

func (x UnlockResponse_Status) Enum() *UnlockResponse_Status {
	p := new(UnlockResponse_Status)
	*p = x
	return p
}

// TopicEventResponseStatus allows apps to have finer control over handling of the message.
type TopicEventResponse_TopicEventResponseStatus int32

const (
	// SUCCESS is the default behavior: message is acknowledged and not retried or logged.
	TopicEventResponse_SUCCESS TopicEventResponse_TopicEventResponseStatus = 0
	// RETRY status signals Dapr to retry the message as part of an expected scenario (no warning is logged).
	TopicEventResponse_RETRY TopicEventResponse_TopicEventResponseStatus = 1
	// DROP status signals Dapr to drop the message as part of an unexpected scenario (warning is logged).
	TopicEventResponse_DROP TopicEventResponse_TopicEventResponseStatus = 2
)

// Enum value maps for TopicEventResponse_TopicEventResponseStatus.
var (
	TopicEventResponse_TopicEventResponseStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "RETRY",
		2: "DROP",
	}
	TopicEventResponse_TopicEventResponseStatus_value = map[string]int32{
		"SUCCESS": 0,
		"RETRY":   1,
		"DROP":    2,
	}
)

func (x TopicEventResponse_TopicEventResponseStatus) Enum() *TopicEventResponse_TopicEventResponseStatus {
	p := new(TopicEventResponse_TopicEventResponseStatus)
	*p = x
	return p
}

// BindingEventConcurrency is the kind of concurrency
type BindingEventResponse_BindingEventConcurrency int32

const (
	// SEQUENTIAL sends data to output bindings specified in "to" sequentially.
	BindingEventResponse_SEQUENTIAL BindingEventResponse_BindingEventConcurrency = 0
	// PARALLEL sends data to output bindings specified in "to" in parallel.
	BindingEventResponse_PARALLEL BindingEventResponse_BindingEventConcurrency = 1
)

// Enum value maps for BindingEventResponse_BindingEventConcurrency.
var (
	BindingEventResponse_BindingEventConcurrency_name = map[int32]string{
		0: "SEQUENTIAL",
		1: "PARALLEL",
	}
	BindingEventResponse_BindingEventConcurrency_value = map[string]int32{
		"SEQUENTIAL": 0,
		"PARALLEL":   1,
	}
)

func (x BindingEventResponse_BindingEventConcurrency) Enum() *BindingEventResponse_BindingEventConcurrency {
	p := new(BindingEventResponse_BindingEventConcurrency)
	*p = x
	return p
}

// Type of HTTP 1.1 Methods
// RFC 7231: https://tools.ietf.org/html/rfc7231#page-24
// RFC 5789: https://datatracker.ietf.org/doc/html/rfc5789
type HTTPExtension_Verb int32

const (
	HTTPExtension_NONE    HTTPExtension_Verb = 0
	HTTPExtension_GET     HTTPExtension_Verb = 1
	HTTPExtension_HEAD    HTTPExtension_Verb = 2
	HTTPExtension_POST    HTTPExtension_Verb = 3
	HTTPExtension_PUT     HTTPExtension_Verb = 4
	HTTPExtension_DELETE  HTTPExtension_Verb = 5
	HTTPExtension_CONNECT HTTPExtension_Verb = 6
	HTTPExtension_OPTIONS HTTPExtension_Verb = 7
	HTTPExtension_TRACE   HTTPExtension_Verb = 8
	HTTPExtension_PATCH   HTTPExtension_Verb = 9
)

// Enum value maps for HTTPExtension_Verb.
var (
	HTTPExtension_Verb_name = map[int32]string{
		0: "NONE",
		1: "GET",
		2: "HEAD",
		3: "POST",
		4: "PUT",
		5: "DELETE",
		6: "CONNECT",
		7: "OPTIONS",
		8: "TRACE",
		9: "PATCH",
	}
	HTTPExtension_Verb_value = map[string]int32{
		"NONE":    0,
		"GET":     1,
		"HEAD":    2,
		"POST":    3,
		"PUT":     4,
		"DELETE":  5,
		"CONNECT": 6,
		"OPTIONS": 7,
		"TRACE":   8,
		"PATCH":   9,
	}
)

func (x HTTPExtension_Verb) Enum() *HTTPExtension_Verb {
	p := new(HTTPExtension_Verb)
	*p = x
	return p
}

// Enum describing the supported concurrency for state.
type StateOptions_StateConcurrency int32

const (
	StateOptions_CONCURRENCY_UNSPECIFIED StateOptions_StateConcurrency = 0
	StateOptions_CONCURRENCY_FIRST_WRITE StateOptions_StateConcurrency = 1
	StateOptions_CONCURRENCY_LAST_WRITE  StateOptions_StateConcurrency = 2
)

// Enum value maps for StateOptions_StateConcurrency.
var (
	StateOptions_StateConcurrency_name = map[int32]string{
		0: "CONCURRENCY_UNSPECIFIED",
		1: "CONCURRENCY_FIRST_WRITE",
		2: "CONCURRENCY_LAST_WRITE",
	}
	StateOptions_StateConcurrency_value = map[string]int32{
		"CONCURRENCY_UNSPECIFIED": 0,
		"CONCURRENCY_FIRST_WRITE": 1,
		"CONCURRENCY_LAST_WRITE":  2,
	}
)

func (x StateOptions_StateConcurrency) Enum() *StateOptions_StateConcurrency {
	p := new(StateOptions_StateConcurrency)
	*p = x
	return p
}

// Enum describing the supported consistency for state.
type StateOptions_StateConsistency int32

const (
	StateOptions_CONSISTENCY_UNSPECIFIED StateOptions_StateConsistency = 0
	StateOptions_CONSISTENCY_EVENTUAL    StateOptions_StateConsistency = 1
	StateOptions_CONSISTENCY_STRONG      StateOptions_StateConsistency = 2
)

// Enum value maps for StateOptions_StateConsistency.
var (
	StateOptions_StateConsistency_name = map[int32]string{
		0: "CONSISTENCY_UNSPECIFIED",
		1: "CONSISTENCY_EVENTUAL",
		2: "CONSISTENCY_STRONG",
	}
	StateOptions_StateConsistency_value = map[string]int32{
		"CONSISTENCY_UNSPECIFIED": 0,
		"CONSISTENCY_EVENTUAL":    1,
		"CONSISTENCY_STRONG":      2,
	}
)

func (x StateOptions_StateConsistency) Enum() *StateOptions_StateConsistency {
	p := new(StateOptions_StateConsistency)
	*p = x
	return p
}

// InvokeServiceRequest represents the request message for Service invocation.
type InvokeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Callee's app id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. message which will be delivered to callee.
	Message *InvokeRequest `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InvokeServiceRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvokeServiceRequest) GetMessage() *InvokeRequest {
	if x != nil {
		return x.Message
	}
	return nil
}

// GetStateRequest is the message to get key-value states from specific state store.
type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The key of the desired state
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The read consistency of the state store.
	Consistency StateOptions_StateConsistency `protobuf:"varint,3,opt,name=consistency,proto3,enum=dapr.proto.runtime.v1.StateOptions_StateConsistency" json:"consistency,omitempty"`
	// The metadata which will be sent to state store components.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetStateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *GetStateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetStateRequest) GetConsistency() StateOptions_StateConsistency {
	if x != nil {
		return x.Consistency
	}
	return StateOptions_CONSISTENCY_UNSPECIFIED
}

func (x *GetStateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetBulkStateRequest is the message to get a list of key-value states from specific state store.
type GetBulkStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The keys to get.
	Keys []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// The number of parallel operations executed on the state store for a get operation.
	Parallelism int32 `protobuf:"varint,3,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	// The metadata which will be sent to state store components.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetBulkStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetBulkStateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *GetBulkStateRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetBulkStateRequest) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *GetBulkStateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetBulkStateResponse is the response conveying the list of state values.
type GetBulkStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of items containing the keys to get values for.
	Items []*BulkStateItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetBulkStateResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetBulkStateResponse) GetItems() []*BulkStateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// BulkStateItem is the response item for a bulk get operation.
// Return values include the item key, data and etag.
type BulkStateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state item key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The byte array data
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The entity tag which represents the specific version of data.
	// ETag format is defined by the corresponding data store.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// The error that was returned from the state store in case of a failed get operation.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// The metadata which will be sent to app.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BulkStateItem) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BulkStateItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BulkStateItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BulkStateItem) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *BulkStateItem) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *BulkStateItem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetStateResponse is the response conveying the state value and etag.
type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The byte array data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The entity tag which represents the specific version of data.
	// ETag format is defined by the corresponding data store.
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// The metadata which will be sent to app.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetStateResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetStateResponse) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *GetStateResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// DeleteStateRequest is the message to delete key-value states in the specific state store.
type DeleteStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The key of the desired state
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The entity tag which represents the specific version of data.
	// The exact ETag format is defined by the corresponding data store.
	Etag *Etag `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// State operation options which includes concurrency/
	// consistency/retry_policy.
	Options *StateOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	// The metadata which will be sent to state store components.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DeleteStateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *DeleteStateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeleteStateRequest) GetEtag() *Etag {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *DeleteStateRequest) GetOptions() *StateOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *DeleteStateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// DeleteBulkStateRequest is the message to delete a list of key-value states from specific state store.
type DeleteBulkStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The array of the state key values.
	States []*StateItem `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *DeleteBulkStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DeleteBulkStateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *DeleteBulkStateRequest) GetStates() []*StateItem {
	if x != nil {
		return x.States
	}
	return nil
}

// SaveStateRequest is the message to save multiple states into state store.
type SaveStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The array of the state key values.
	States []*StateItem `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *SaveStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SaveStateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *SaveStateRequest) GetStates() []*StateItem {
	if x != nil {
		return x.States
	}
	return nil
}

// QueryStateRequest is the message to query state store.
type QueryStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The query in JSON format.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The metadata which will be sent to state store components.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *QueryStateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *QueryStateRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryStateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type QueryStateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The object value.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The entity tag which represents the specific version of data.
	// ETag format is defined by the corresponding data store.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// The error message indicating an error in processing of the query result.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QueryStateItem) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *QueryStateItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryStateItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryStateItem) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *QueryStateItem) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// QueryStateResponse is the response conveying the query results.
type QueryStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An array of query results.
	Results []*QueryStateItem `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Pagination token.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The metadata which will be sent to app.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryStateResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *QueryStateResponse) GetResults() []*QueryStateItem {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QueryStateResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *QueryStateResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PublishEventRequest is the message to publish event data to pubsub topic
type PublishEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the pubsub component
	PubsubName string `protobuf:"bytes,1,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	// The pubsub topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The data which will be published to topic.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// The content type for the data (optional).
	DataContentType string `protobuf:"bytes,4,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
	// The metadata passing to pub components
	//
	// metadata property:
	// - key : the key of the message.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublishEventRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PublishEventRequest) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *PublishEventRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishEventRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublishEventRequest) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

func (x *PublishEventRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BulkPublishRequest is the message to bulk publish events to pubsub topic
type BulkPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the pubsub component
	PubsubName string `protobuf:"bytes,1,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	// The pubsub topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The entries which contain the individual events and associated details to be published
	Entries []*BulkPublishRequestEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	// The request level metadata passing to to the pubsub components
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BulkPublishRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BulkPublishRequest) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *BulkPublishRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *BulkPublishRequest) GetEntries() []*BulkPublishRequestEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *BulkPublishRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BulkPublishRequestEntry is the message containing the event to be bulk published
type BulkPublishRequestEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request scoped unique ID referring to this message. Used to map status in response
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// The event which will be pulished to the topic
	Event []byte `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// The content type for the event
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The event level metadata passing to the pubsub component
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BulkPublishRequestEntry) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BulkPublishRequestEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *BulkPublishRequestEntry) GetEvent() []byte {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *BulkPublishRequestEntry) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *BulkPublishRequestEntry) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BulkPublishResponse is the message returned from a BulkPublishEvent call
type BulkPublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entries for different events that failed publish in the BulkPublishEvent call
	FailedEntries []*BulkPublishResponseFailedEntry `protobuf:"bytes,1,rep,name=failedEntries,proto3" json:"failedEntries,omitempty"`
}

func (x *BulkPublishResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BulkPublishResponse) GetFailedEntries() []*BulkPublishResponseFailedEntry {
	if x != nil {
		return x.FailedEntries
	}
	return nil
}

// BulkPublishResponseFailedEntry is the message containing the entryID and error of a failed event in BulkPublishEvent call
type BulkPublishResponseFailedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response scoped unique ID referring to this message
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// The error message if any on failure
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BulkPublishResponseFailedEntry) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BulkPublishResponseFailedEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *BulkPublishResponseFailedEntry) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// InvokeBindingRequest is the message to send data to output bindings
type InvokeBindingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the output binding to invoke.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The data which will be sent to output binding.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The metadata passing to output binding components
	//
	// Common metadata property:
	// - ttlInSeconds : the time to live in seconds for the message.
	// If set in the binding definition will cause all messages to
	// have a default time to live. The message ttl overrides any value
	// in the binding definition.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the operation type for the binding to invoke
	Operation string `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *InvokeBindingRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeBindingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvokeBindingRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InvokeBindingRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InvokeBindingRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

// InvokeBindingResponse is the message returned from an output binding invocation
type InvokeBindingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data which will be sent to output binding.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The metadata returned from an external system
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InvokeBindingResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeBindingResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InvokeBindingResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetSecretRequest is the message to get secret from secret store.
type GetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of secret store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The name of secret key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The metadata which will be sent to secret store components.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSecretRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetSecretRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *GetSecretRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetSecretRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetSecretResponse is the response message to convey the requested secret.
type GetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is the secret value. Some secret store, such as kubernetes secret
	// store, can save multiple secrets for single secret key.
	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSecretResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetSecretResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetBulkSecretRequest is the message to get the secrets from secret store.
type GetBulkSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of secret store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The metadata which will be sent to secret store components.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetBulkSecretRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetBulkSecretRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *GetBulkSecretRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// SecretResponse is a map of decrypted string/string values
type SecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secrets map[string]string `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SecretResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SecretResponse) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// GetBulkSecretResponse is the response message to convey the requested secrets.
type GetBulkSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data hold the secret values. Some secret store, such as kubernetes secret
	// store, can save multiple secrets for single secret key.
	Data map[string]*SecretResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetBulkSecretResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetBulkSecretResponse) GetData() map[string]*SecretResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// TransactionalStateOperation is the message to execute a specified operation with a key-value pair.
type TransactionalStateOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of operation to be executed
	OperationType string `protobuf:"bytes,1,opt,name=operationType,proto3" json:"operationType,omitempty"`
	// State values to be operated on
	Request *StateItem `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *TransactionalStateOperation) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TransactionalStateOperation) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *TransactionalStateOperation) GetRequest() *StateItem {
	if x != nil {
		return x.Request
	}
	return nil
}

// ExecuteStateTransactionRequest is the message to execute multiple operations on a specified store.
type ExecuteStateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. name of state store.
	StoreName string `protobuf:"bytes,1,opt,name=storeName,proto3" json:"storeName,omitempty"`
	// Required. transactional operation list.
	Operations []*TransactionalStateOperation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
	// The metadata used for transactional operations.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecuteStateTransactionRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ExecuteStateTransactionRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *ExecuteStateTransactionRequest) GetOperations() []*TransactionalStateOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ExecuteStateTransactionRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// RegisterActorTimerRequest is the message to register a timer for an actor of a given type and id.
type RegisterActorTimerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DueTime   string `protobuf:"bytes,4,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	Period    string `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	Callback  string `protobuf:"bytes,6,opt,name=callback,proto3" json:"callback,omitempty"`
	Data      []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Ttl       string `protobuf:"bytes,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *RegisterActorTimerRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *RegisterActorTimerRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *RegisterActorTimerRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *RegisterActorTimerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterActorTimerRequest) GetDueTime() string {
	if x != nil {
		return x.DueTime
	}
	return ""
}

func (x *RegisterActorTimerRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *RegisterActorTimerRequest) GetCallback() string {
	if x != nil {
		return x.Callback
	}
	return ""
}

func (x *RegisterActorTimerRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RegisterActorTimerRequest) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

// UnregisterActorTimerRequest is the message to unregister an actor timer
type UnregisterActorTimerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnregisterActorTimerRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *UnregisterActorTimerRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *UnregisterActorTimerRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *UnregisterActorTimerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RegisterActorReminderRequest is the message to register a reminder for an actor of a given type and id.
type RegisterActorReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DueTime   string `protobuf:"bytes,4,opt,name=due_time,json=dueTime,proto3" json:"due_time,omitempty"`
	Period    string `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Ttl       string `protobuf:"bytes,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *RegisterActorReminderRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *RegisterActorReminderRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *RegisterActorReminderRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *RegisterActorReminderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterActorReminderRequest) GetDueTime() string {
	if x != nil {
		return x.DueTime
	}
	return ""
}

func (x *RegisterActorReminderRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *RegisterActorReminderRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RegisterActorReminderRequest) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

// UnregisterActorReminderRequest is the message to unregister an actor reminder.
type UnregisterActorReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnregisterActorReminderRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *UnregisterActorReminderRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *UnregisterActorReminderRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *UnregisterActorReminderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RenameActorReminderRequest is the message to rename an actor reminder.
type RenameActorReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	OldName   string `protobuf:"bytes,3,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName   string `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameActorReminderRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *RenameActorReminderRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *RenameActorReminderRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *RenameActorReminderRequest) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameActorReminderRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// GetActorStateRequest is the message to get key-value states from specific actor.
type GetActorStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetActorStateRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetActorStateRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *GetActorStateRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *GetActorStateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// GetActorStateResponse is the response conveying the actor's state value.
type GetActorStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetActorStateResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetActorStateResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ExecuteActorStateTransactionRequest is the message to execute multiple operations on a specified actor.
type ExecuteActorStateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType  string                              `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId    string                              `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Operations []*TransactionalActorStateOperation `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *ExecuteActorStateTransactionRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ExecuteActorStateTransactionRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *ExecuteActorStateTransactionRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ExecuteActorStateTransactionRequest) GetOperations() []*TransactionalActorStateOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// TransactionalActorStateOperation is the message to execute a specified operation with a key-value pair.
type TransactionalActorStateOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType string     `protobuf:"bytes,1,opt,name=operationType,proto3" json:"operationType,omitempty"`
	Key           string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         *anypb.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TransactionalActorStateOperation) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TransactionalActorStateOperation) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *TransactionalActorStateOperation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TransactionalActorStateOperation) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

// InvokeActorRequest is the message to call an actor.
type InvokeActorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string            `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	ActorId   string            `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Method    string            `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InvokeActorRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeActorRequest) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *InvokeActorRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *InvokeActorRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *InvokeActorRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InvokeActorRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// InvokeActorResponse is the method that returns an actor invocation response.
type InvokeActorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InvokeActorResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeActorResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetMetadataResponse is a message that is returned on GetMetadata rpc call
type GetMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ActiveActorsCount    []*ActiveActorsCount    `protobuf:"bytes,2,rep,name=active_actors_count,json=activeActorsCount,proto3" json:"active_actors_count,omitempty"`
	RegisteredComponents []*RegisteredComponents `protobuf:"bytes,3,rep,name=registered_components,json=registeredComponents,proto3" json:"registered_components,omitempty"`
	ExtendedMetadata     map[string]string       `protobuf:"bytes,4,rep,name=extended_metadata,json=extendedMetadata,proto3" json:"extended_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subscriptions        []*PubsubSubscription   `protobuf:"bytes,5,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *GetMetadataResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetMetadataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMetadataResponse) GetActiveActorsCount() []*ActiveActorsCount {
	if x != nil {
		return x.ActiveActorsCount
	}
	return nil
}

func (x *GetMetadataResponse) GetRegisteredComponents() []*RegisteredComponents {
	if x != nil {
		return x.RegisteredComponents
	}
	return nil
}

func (x *GetMetadataResponse) GetExtendedMetadata() map[string]string {
	if x != nil {
		return x.ExtendedMetadata
	}
	return nil
}

func (x *GetMetadataResponse) GetSubscriptions() []*PubsubSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type ActiveActorsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ActiveActorsCount) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ActiveActorsCount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActiveActorsCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RegisteredComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Version      string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Capabilities []string `protobuf:"bytes,4,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *RegisteredComponents) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *RegisteredComponents) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisteredComponents) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegisteredComponents) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisteredComponents) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type PubsubSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubsubName      string                   `protobuf:"bytes,1,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	Topic           string                   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Metadata        map[string]string        `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rules           *PubsubSubscriptionRules `protobuf:"bytes,4,opt,name=rules,proto3" json:"rules,omitempty"`
	DeadLetterTopic string                   `protobuf:"bytes,5,opt,name=dead_letter_topic,json=deadLetterTopic,proto3" json:"dead_letter_topic,omitempty"`
}

func (x *PubsubSubscription) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PubsubSubscription) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *PubsubSubscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PubsubSubscription) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PubsubSubscription) GetRules() *PubsubSubscriptionRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *PubsubSubscription) GetDeadLetterTopic() string {
	if x != nil {
		return x.DeadLetterTopic
	}
	return ""
}

type PubsubSubscriptionRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*PubsubSubscriptionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *PubsubSubscriptionRules) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PubsubSubscriptionRules) GetRules() []*PubsubSubscriptionRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type PubsubSubscriptionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PubsubSubscriptionRule) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PubsubSubscriptionRule) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *PubsubSubscriptionRule) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SetMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetMetadataRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SetMetadataRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetMetadataRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// GetConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
type GetConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of configuration store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// Optional. The key of the configuration item to fetch.
	// If set, only query for the specified configuration items.
	// Empty list means fetch all.
	Keys []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// Optional. The metadata which will be sent to configuration store components.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConfigurationRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetConfigurationRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *GetConfigurationRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetConfigurationRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetConfigurationResponse is the response conveying the list of configuration values.
// It should be the FULL configuration of specified application which contains all of its configuration items.
type GetConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*ConfigurationItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConfigurationResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetConfigurationResponse) GetItems() map[string]*ConfigurationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// SubscribeConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
type SubscribeConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of configuration store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// Optional. The key of the configuration item to fetch.
	// If set, only query for the specified configuration items.
	// Empty list means fetch all.
	Keys []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// The metadata which will be sent to configuration store components.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubscribeConfigurationRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SubscribeConfigurationRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *SubscribeConfigurationRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *SubscribeConfigurationRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// UnSubscribeConfigurationRequest is the message to stop watching the key-value configuration.
type UnsubscribeConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of configuration store.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The id to unsubscribe.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnsubscribeConfigurationRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *UnsubscribeConfigurationRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *UnsubscribeConfigurationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubscribeConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscribe id, used to stop subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The list of items containing configuration values
	Items map[string]*ConfigurationItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubscribeConfigurationResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SubscribeConfigurationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscribeConfigurationResponse) GetItems() map[string]*ConfigurationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UnsubscribeConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UnsubscribeConfigurationResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *UnsubscribeConfigurationResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *UnsubscribeConfigurationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TryLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The lock store name,e.g. `redis`.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// Required. resource_id is the lock key. e.g. `order_id_111`
	// It stands for "which resource I want to protect"
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Required. lock_owner indicate the identifier of lock owner.
	// You can generate a uuid as lock_owner.For example,in golang:
	//
	// req.LockOwner = uuid.New().String()
	//
	// This field is per request,not per process,so it is different for each request,
	// which aims to prevent multi-thread in the same process trying the same lock concurrently.
	//
	// The reason why we don't make it automatically generated is:
	// 1. If it is automatically generated,there must be a 'my_lock_owner_id' field in the response.
	// This name is so weird that we think it is inappropriate to put it into the api spec
	// 2. If we change the field 'my_lock_owner_id' in the response to 'lock_owner',which means the current lock owner of this lock,
	// we find that in some lock services users can't get the current lock owner.Actually users don't need it at all.
	// 3. When reentrant lock is needed,the existing lock_owner is required to identify client and check "whether this client can reenter this lock".
	// So this field in the request shouldn't be removed.
	LockOwner string `protobuf:"bytes,3,opt,name=lock_owner,json=lockOwner,proto3" json:"lock_owner,omitempty"`
	// Required. The time before expiry.The time unit is second.
	ExpiryInSeconds int32 `protobuf:"varint,4,opt,name=expiryInSeconds,proto3" json:"expiryInSeconds,omitempty"`
}

func (x *TryLockRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TryLockRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *TryLockRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TryLockRequest) GetLockOwner() string {
	if x != nil {
		return x.LockOwner
	}
	return ""
}

func (x *TryLockRequest) GetExpiryInSeconds() int32 {
	if x != nil {
		return x.ExpiryInSeconds
	}
	return 0
}

type TryLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TryLockResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TryLockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// resource_id is the lock key.
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	LockOwner  string `protobuf:"bytes,3,opt,name=lock_owner,json=lockOwner,proto3" json:"lock_owner,omitempty"`
}

func (x *UnlockRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *UnlockRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *UnlockRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UnlockRequest) GetLockOwner() string {
	if x != nil {
		return x.LockOwner
	}
	return ""
}

type UnlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UnlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=dapr.proto.runtime.v1.UnlockResponse_Status" json:"status,omitempty"`
}

func (x *UnlockResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *UnlockResponse) GetStatus() UnlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return UnlockResponse_SUCCESS
}

type WorkflowReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *WorkflowReference) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *WorkflowReference) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId        string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkflowType      string `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowComponent string `protobuf:"bytes,3,opt,name=workflow_component,json=workflowComponent,proto3" json:"workflow_component,omitempty"`
}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetWorkflowRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetWorkflowRequest) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *GetWorkflowRequest) GetWorkflowComponent() string {
	if x != nil {
		return x.WorkflowComponent
	}
	return ""
}

type GetWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string            `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StartTime  int64             `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Metadata   map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWorkflowResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *GetWorkflowResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetWorkflowResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetWorkflowResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StartWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId        string            `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkflowComponent string            `protobuf:"bytes,2,opt,name=workflow_component,json=workflowComponent,proto3" json:"workflow_component,omitempty"`
	WorkflowName      string            `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Options           map[string]string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Input             []byte            `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *StartWorkflowRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *StartWorkflowRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowComponent() string {
	if x != nil {
		return x.WorkflowComponent
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *StartWorkflowRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StartWorkflowRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

type TerminateWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId        string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	WorkflowComponent string `protobuf:"bytes,2,opt,name=workflow_component,json=workflowComponent,proto3" json:"workflow_component,omitempty"`
}

func (x *TerminateWorkflowRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TerminateWorkflowRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *TerminateWorkflowRequest) GetWorkflowComponent() string {
	if x != nil {
		return x.WorkflowComponent
	}
	return ""
}

type TerminateWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateWorkflowResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

// TopicEventRequest message is compatible with CloudEvent spec v1.0
// https://github.com/cloudevents/spec/blob/v1.0/spec.md
type TopicEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id identifies the event. Producers MUST ensure that source + id
	// is unique for each distinct event. If a duplicate event is re-sent
	// (e.g. due to a network error) it MAY have the same id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// source identifies the context in which an event happened.
	// Often this will include information such as the type of the
	// event source, the organization publishing the event or the process
	// that produced the event. The exact syntax and semantics behind
	// the data encoded in the URI is defined by the event producer.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The type of event related to the originating occurrence.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The version of the CloudEvents specification.
	SpecVersion string `protobuf:"bytes,4,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// The content type of data value.
	DataContentType string `protobuf:"bytes,5,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
	// The content of the event.
	Data []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	// The pubsub topic which publisher sent to.
	Topic string `protobuf:"bytes,6,opt,name=topic,proto3" json:"topic,omitempty"`
	// The name of the pubsub the publisher sent to.
	PubsubName string `protobuf:"bytes,8,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	// The matching path from TopicSubscription/routes (if specified) for this event.
	// This value is used by OnTopicEvent to "switch" inside the handler.
	Path string `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
	// The map of additional custom properties to be sent to the app. These are considered to be cloud event extensions.
	Extensions *structpb.Struct `protobuf:"bytes,10,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *TopicEventRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TopicEventRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TopicEventRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TopicEventRequest) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *TopicEventRequest) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

func (x *TopicEventRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TopicEventRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicEventRequest) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *TopicEventRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TopicEventRequest) GetExtensions() *structpb.Struct {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// TopicEventResponse is response from app on published message
type TopicEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of output bindings.
	Status TopicEventResponse_TopicEventResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=dapr.proto.runtime.v1.TopicEventResponse_TopicEventResponseStatus" json:"status,omitempty"`
}

func (x *TopicEventResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventResponse) GetStatus() TopicEventResponse_TopicEventResponseStatus {
	if x != nil {
		return x.Status
	}
	return TopicEventResponse_SUCCESS
}

// TopicEventCERequest message is compatible with CloudEvent spec v1.0
type TopicEventCERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this cloud event.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// source identifies the context in which an event happened.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The type of event related to the originating occurrence.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The version of the CloudEvents specification.
	SpecVersion string `protobuf:"bytes,4,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// The content type of data value.
	DataContentType string `protobuf:"bytes,5,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
	// The content of the event.
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// Custom attributes which includes cloud event extensions.
	Extensions *structpb.Struct `protobuf:"bytes,7,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *TopicEventCERequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventCERequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TopicEventCERequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TopicEventCERequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TopicEventCERequest) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *TopicEventCERequest) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

func (x *TopicEventCERequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TopicEventCERequest) GetExtensions() *structpb.Struct {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// TopicEventBulkRequestEntry represents a single message inside a bulk request
type TopicEventBulkRequestEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the message.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// The content of the event.
	//
	// Types that are assignable to Event:
	//	*TopicEventBulkRequestEntry_Bytes
	//	*TopicEventBulkRequestEntry_CloudEvent
	Event isTopicEventBulkRequestEntry_Event `protobuf_oneof:"event"`
	// content type of the event contained.
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The metadata associated with the event.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TopicEventBulkRequestEntry) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventBulkRequestEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (m *TopicEventBulkRequestEntry) GetEvent() isTopicEventBulkRequestEntry_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TopicEventBulkRequestEntry) GetBytes() []byte {
	if x, ok := x.GetEvent().(*TopicEventBulkRequestEntry_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *TopicEventBulkRequestEntry) GetCloudEvent() *TopicEventCERequest {
	if x, ok := x.GetEvent().(*TopicEventBulkRequestEntry_CloudEvent); ok {
		return x.CloudEvent
	}
	return nil
}

func (x *TopicEventBulkRequestEntry) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TopicEventBulkRequestEntry) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isTopicEventBulkRequestEntry_Event interface {
	isTopicEventBulkRequestEntry_Event()
}

type TopicEventBulkRequestEntry_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

type TopicEventBulkRequestEntry_CloudEvent struct {
	CloudEvent *TopicEventCERequest `protobuf:"bytes,3,opt,name=cloud_event,json=cloudEvent,proto3,oneof"`
}

func (*TopicEventBulkRequestEntry_Bytes) isTopicEventBulkRequestEntry_Event() {}

func (*TopicEventBulkRequestEntry_CloudEvent) isTopicEventBulkRequestEntry_Event() {}

// TopicEventBulkRequest represents request for bulk message
type TopicEventBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the bulk request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The list of items inside this bulk request.
	Entries []*TopicEventBulkRequestEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	// The metadata associated with the this bulk request.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The pubsub topic which publisher sent to.
	Topic string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	// The name of the pubsub the publisher sent to.
	PubsubName string `protobuf:"bytes,5,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	// The type of event related to the originating occurrence.
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// The matching path from TopicSubscription/routes (if specified) for this event.
	// This value is used by OnTopicEvent to "switch" inside the handler.
	Path string `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TopicEventBulkRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventBulkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TopicEventBulkRequest) GetEntries() []*TopicEventBulkRequestEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TopicEventBulkRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TopicEventBulkRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicEventBulkRequest) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *TopicEventBulkRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TopicEventBulkRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// TopicEventBulkResponseEntry Represents single response, as part of TopicEventBulkResponse, to be
// sent by subscibed App for the corresponding single message during bulk subscribe
type TopicEventBulkResponseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier associated the message.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// The status of the response.
	Status TopicEventResponse_TopicEventResponseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=dapr.proto.runtime.v1.TopicEventResponse_TopicEventResponseStatus" json:"status,omitempty"`
}

func (x *TopicEventBulkResponseEntry) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventBulkResponseEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *TopicEventBulkResponseEntry) GetStatus() TopicEventResponse_TopicEventResponseStatus {
	if x != nil {
		return x.Status
	}
	return TopicEventResponse_SUCCESS
}

// AppBulkResponse is response from app on published message
type TopicEventBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of all responses for the bulk request.
	Statuses []*TopicEventBulkResponseEntry `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *TopicEventBulkResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicEventBulkResponse) GetStatuses() []*TopicEventBulkResponseEntry {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// BindingEventRequest represents input bindings event.
type BindingEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the input binding component.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The payload that the input bindings sent
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The metadata set by the input binging components.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BindingEventRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BindingEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BindingEventRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BindingEventRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BindingEventResponse includes operations to save state or
// send data to output bindings optionally.
type BindingEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of state store where states are saved.
	StoreName string `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// The state key values which will be stored in store_name.
	States []*StateItem `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	// The list of output bindings.
	To []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	// The content which will be sent to "to" output bindings.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// The concurrency of output bindings to send data to
	// "to" output bindings list. The default is SEQUENTIAL.
	Concurrency BindingEventResponse_BindingEventConcurrency `protobuf:"varint,5,opt,name=concurrency,proto3,enum=dapr.proto.runtime.v1.BindingEventResponse_BindingEventConcurrency" json:"concurrency,omitempty"`
}

func (x *BindingEventResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BindingEventResponse) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *BindingEventResponse) GetStates() []*StateItem {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *BindingEventResponse) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BindingEventResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BindingEventResponse) GetConcurrency() BindingEventResponse_BindingEventConcurrency {
	if x != nil {
		return x.Concurrency
	}
	return BindingEventResponse_SEQUENTIAL
}

// ListTopicSubscriptionsResponse is the message including the list of the subscribing topics.
type ListTopicSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of topics.
	Subscriptions []*TopicSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *ListTopicSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ListTopicSubscriptionsResponse) GetSubscriptions() []*TopicSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// TopicSubscription represents topic and metadata.
type TopicSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the pubsub containing the topic below to subscribe to.
	PubsubName string `protobuf:"bytes,1,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	// Required. The name of topic which will be subscribed
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The optional properties used for this topic's subscription e.g. session id
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The optional routing rules to match against. In the gRPC interface, OnTopicEvent
	// is still invoked but the matching path is sent in the TopicEventRequest.
	Routes *TopicRoutes `protobuf:"bytes,5,opt,name=routes,proto3" json:"routes,omitempty"`
	// The optional dead letter queue for this topic to send events to.
	DeadLetterTopic string `protobuf:"bytes,6,opt,name=dead_letter_topic,json=deadLetterTopic,proto3" json:"dead_letter_topic,omitempty"`
	// The optional bulk subscribe settings for this topic.
	BulkSubscribe *BulkSubscribeConfig `protobuf:"bytes,7,opt,name=bulk_subscribe,json=bulkSubscribe,proto3" json:"bulk_subscribe,omitempty"`
}

func (x *TopicSubscription) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicSubscription) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *TopicSubscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicSubscription) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TopicSubscription) GetRoutes() *TopicRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *TopicSubscription) GetDeadLetterTopic() string {
	if x != nil {
		return x.DeadLetterTopic
	}
	return ""
}

func (x *TopicSubscription) GetBulkSubscribe() *BulkSubscribeConfig {
	if x != nil {
		return x.BulkSubscribe
	}
	return nil
}

type TopicRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rules for this topic.
	Rules []*TopicRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// The default path for this topic.
	Default string `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *TopicRoutes) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicRoutes) GetRules() []*TopicRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *TopicRoutes) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type TopicRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The optional CEL expression used to match the event.
	// If the match is not specified, then the route is considered
	// the default.
	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// The path used to identify matches for this subscription.
	// This value is passed in TopicEventRequest and used by OnTopicEvent to "switch"
	// inside the handler.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TopicRule) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *TopicRule) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *TopicRule) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// BulkSubscribeConfig is the message to pass settings for bulk subscribe
type BulkSubscribeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Flag to enable/disable bulk subscribe
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Optional. Max number of messages to be sent in a single bulk request
	MaxMessagesCount int32 `protobuf:"varint,2,opt,name=max_messages_count,json=maxMessagesCount,proto3" json:"max_messages_count,omitempty"`
	// Optional. Max duration to wait for messages to be sent in a single bulk request
	MaxAwaitDurationMs int32 `protobuf:"varint,3,opt,name=max_await_duration_ms,json=maxAwaitDurationMs,proto3" json:"max_await_duration_ms,omitempty"`
}

func (x *BulkSubscribeConfig) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *BulkSubscribeConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BulkSubscribeConfig) GetMaxMessagesCount() int32 {
	if x != nil {
		return x.MaxMessagesCount
	}
	return 0
}

func (x *BulkSubscribeConfig) GetMaxAwaitDurationMs() int32 {
	if x != nil {
		return x.MaxAwaitDurationMs
	}
	return 0
}

// ListInputBindingsResponse is the message including the list of input bindings.
type ListInputBindingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of input bindings.
	Bindings []string `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (x *ListInputBindingsResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ListInputBindingsResponse) GetBindings() []string {
	if x != nil {
		return x.Bindings
	}
	return nil
}

// HealthCheckResponse is the message with the response to the health check.
// This message is currently empty as used as placeholder.
type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

// HTTPExtension includes HTTP verb and querystring
// when Dapr runtime delivers HTTP content.
//
// For example, when callers calls http invoke api
// POST http://localhost:3500/v1.0/invoke/<app_id>/method/<method>?query1=value1&query2=value2
//
// Dapr runtime will parse POST as a verb and extract querystring to quersytring map.
type HTTPExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. HTTP verb.
	Verb HTTPExtension_Verb `protobuf:"varint,1,opt,name=verb,proto3,enum=dapr.proto.runtime.v1.HTTPExtension_Verb" json:"verb,omitempty"`
	// Optional. querystring represents an encoded HTTP url query string in the following format: name=value&name2=value2
	Querystring string `protobuf:"bytes,2,opt,name=querystring,proto3" json:"querystring,omitempty"`
}

func (x *HTTPExtension) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *HTTPExtension) GetVerb() HTTPExtension_Verb {
	if x != nil {
		return x.Verb
	}
	return HTTPExtension_NONE
}

func (x *HTTPExtension) GetQuerystring() string {
	if x != nil {
		return x.Querystring
	}
	return ""
}

// InvokeRequest is the message to invoke a method with the data.
// This message is used in InvokeService of Dapr gRPC Service and OnInvoke
// of AppCallback gRPC service.
type InvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. method is a method name which will be invoked by caller.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Required in unary RPCs. Bytes value or Protobuf message which caller sent.
	// Dapr treats Any.value as bytes type if Any.type_url is unset.
	Data *anypb.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The type of data content.
	//
	// This field is required if data delivers http request body
	// Otherwise, this is optional.
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// HTTP specific fields if request conveys http-compatible request.
	//
	// This field is required for http-compatible request. Otherwise,
	// this field is optional.
	HttpExtension *HTTPExtension `protobuf:"bytes,4,opt,name=http_extension,json=httpExtension,proto3" json:"http_extension,omitempty"`
}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *InvokeRequest) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InvokeRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *InvokeRequest) GetHttpExtension() *HTTPExtension {
	if x != nil {
		return x.HttpExtension
	}
	return nil
}

// InvokeResponse is the response message inclduing data and its content type
// from app callback.
// This message is used in InvokeService of Dapr gRPC Service and OnInvoke
// of AppCallback gRPC service.
type InvokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required in unary RPCs. The content body of InvokeService response.
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Required. The type of data content.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *InvokeResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InvokeResponse) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InvokeResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

// Chunk of data sent in a streaming request or response.
// This is used in requests including InternalInvokeRequestStream.
type StreamPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data sent in the chunk.
	// The amount of data included in each chunk is up to the discretion of the sender, and can be empty.
	// Additionally, the amount of data doesn't need to be fixed and subsequent messages can send more, or less, data.
	// Receivers must not make assumptions about the number of bytes they'll receive in each chunk.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Sequence number. This is a counter that starts from 0 and increments by 1 on each chunk sent.
	Seq uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *StreamPayload) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *StreamPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamPayload) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// StateItem represents state key, value, and additional options to save state.
type StateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The state key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Required. The state data for key
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The entity tag which represents the specific version of data.
	// The exact ETag format is defined by the corresponding data store.
	Etag *Etag `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// The metadata which will be passed to state store component.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Options for concurrency and consistency to save the state.
	Options *StateOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *StateItem) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *StateItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StateItem) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StateItem) GetEtag() *Etag {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *StateItem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StateItem) GetOptions() *StateOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Etag represents a state item version
type Etag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value sets the etag value
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Etag) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *Etag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// StateOptions configures concurrency and consistency for state operations
type StateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrency StateOptions_StateConcurrency `protobuf:"varint,1,opt,name=concurrency,proto3,enum=dapr.proto.runtime.v1.StateOptions_StateConcurrency" json:"concurrency,omitempty"`
	Consistency StateOptions_StateConsistency `protobuf:"varint,2,opt,name=consistency,proto3,enum=dapr.proto.runtime.v1.StateOptions_StateConsistency" json:"consistency,omitempty"`
}

func (x *StateOptions) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *StateOptions) GetConcurrency() StateOptions_StateConcurrency {
	if x != nil {
		return x.Concurrency
	}
	return StateOptions_CONCURRENCY_UNSPECIFIED
}

func (x *StateOptions) GetConsistency() StateOptions_StateConsistency {
	if x != nil {
		return x.Consistency
	}
	return StateOptions_CONSISTENCY_UNSPECIFIED
}

// ConfigurationItem represents all the configuration with its name(key).
type ConfigurationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value of configuration item.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Version is response only and cannot be fetched. Store is not expected to keep all versions available
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// the metadata which will be passed to/from configuration store component.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigurationItem) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ConfigurationItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConfigurationItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigurationItem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Dapr service provides APIs to user application to access Dapr building blocks.
// go:plugin type=host
type Dapr interface {
	// Invokes a method on a remote Dapr app.
	// Deprecated: Use proxy mode service invocation instead.
	InvokeService(context.Context, InvokeServiceRequest) (InvokeResponse, error)
	// Gets the state for a specific key.
	GetState(context.Context, GetStateRequest) (GetStateResponse, error)
	// Gets a bulk of state items for a list of keys
	GetBulkState(context.Context, GetBulkStateRequest) (GetBulkStateResponse, error)
	// Saves the state for a specific key.
	SaveState(context.Context, SaveStateRequest) (emptypb.Empty, error)
	// Queries the state.
	QueryStateAlpha1(context.Context, QueryStateRequest) (QueryStateResponse, error)
	// Deletes the state for a specific key.
	DeleteState(context.Context, DeleteStateRequest) (emptypb.Empty, error)
	// Deletes a bulk of state items for a list of keys
	DeleteBulkState(context.Context, DeleteBulkStateRequest) (emptypb.Empty, error)
	// Executes transactions for a specified store
	ExecuteStateTransaction(context.Context, ExecuteStateTransactionRequest) (emptypb.Empty, error)
	// Publishes events to the specific topic.
	PublishEvent(context.Context, PublishEventRequest) (emptypb.Empty, error)
	// Bulk Publishes multiple events to the specified topic.
	BulkPublishEventAlpha1(context.Context, BulkPublishRequest) (BulkPublishResponse, error)
	// Invokes binding data to specific output bindings
	InvokeBinding(context.Context, InvokeBindingRequest) (InvokeBindingResponse, error)
	// Gets secrets from secret stores.
	GetSecret(context.Context, GetSecretRequest) (GetSecretResponse, error)
	// Gets a bulk of secrets
	GetBulkSecret(context.Context, GetBulkSecretRequest) (GetBulkSecretResponse, error)
	// Register an actor timer.
	RegisterActorTimer(context.Context, RegisterActorTimerRequest) (emptypb.Empty, error)
	// Unregister an actor timer.
	UnregisterActorTimer(context.Context, UnregisterActorTimerRequest) (emptypb.Empty, error)
	// Register an actor reminder.
	RegisterActorReminder(context.Context, RegisterActorReminderRequest) (emptypb.Empty, error)
	// Unregister an actor reminder.
	UnregisterActorReminder(context.Context, UnregisterActorReminderRequest) (emptypb.Empty, error)
	// Rename an actor reminder.
	RenameActorReminder(context.Context, RenameActorReminderRequest) (emptypb.Empty, error)
	// Gets the state for a specific actor.
	GetActorState(context.Context, GetActorStateRequest) (GetActorStateResponse, error)
	// Executes state transactions for a specified actor
	ExecuteActorStateTransaction(context.Context, ExecuteActorStateTransactionRequest) (emptypb.Empty, error)
	// InvokeActor calls a method on an actor.
	InvokeActor(context.Context, InvokeActorRequest) (InvokeActorResponse, error)
	// GetConfiguration gets configuration from configuration store.
	GetConfigurationAlpha1(context.Context, GetConfigurationRequest) (GetConfigurationResponse, error)
	// SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
	SubscribeConfigurationAlpha1(context.Context, SubscribeConfigurationRequest) (SubscribeConfigurationResponse, error)
	// UnSubscribeConfiguration unsubscribe the subscription of configuration
	UnsubscribeConfigurationAlpha1(context.Context, UnsubscribeConfigurationRequest) (UnsubscribeConfigurationResponse, error)
	// TryLockAlpha1 tries to get a lock with an expiry.
	TryLockAlpha1(context.Context, TryLockRequest) (TryLockResponse, error)
	// UnlockAlpha1 unlocks a lock.
	UnlockAlpha1(context.Context, UnlockRequest) (UnlockResponse, error)
	// Gets metadata of the sidecar
	GetMetadata(context.Context, emptypb.Empty) (GetMetadataResponse, error)
	// Sets value in extended metadata of the sidecar
	SetMetadata(context.Context, SetMetadataRequest) (emptypb.Empty, error)
	// Start Workflow
	StartWorkflowAlpha1(context.Context, StartWorkflowRequest) (WorkflowReference, error)
	// Get Workflow details
	GetWorkflowAlpha1(context.Context, GetWorkflowRequest) (GetWorkflowResponse, error)
	// Terminate Workflow
	TerminateWorkflowAlpha1(context.Context, TerminateWorkflowRequest) (TerminateWorkflowResponse, error)
	// Shutdown the sidecar
	Shutdown(context.Context, emptypb.Empty) (emptypb.Empty, error)
}

// AppCallback V1 allows user application to interact with Dapr runtime.
// User application needs to implement AppCallback service if it needs to
// receive message from dapr runtime.
// go:plugin type=plugin version=1
type AppCallback interface {
	// Invokes service method with InvokeRequest.
	OnInvoke(context.Context, InvokeRequest) (InvokeResponse, error)
	// Lists all topics subscribed by this app.
	ListTopicSubscriptions(context.Context, emptypb.Empty) (ListTopicSubscriptionsResponse, error)
	// Subscribes events from Pubsub
	OnTopicEvent(context.Context, TopicEventRequest) (TopicEventResponse, error)
	// Lists all input bindings subscribed by this app.
	ListInputBindings(context.Context, emptypb.Empty) (ListInputBindingsResponse, error)
	// Listens events from the input bindings
	//
	// User application can save the states or send the events to the output
	// bindings optionally by returning BindingEventResponse.
	OnBindingEvent(context.Context, BindingEventRequest) (BindingEventResponse, error)
}
