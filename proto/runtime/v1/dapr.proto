/*
Copyright 2021 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package dapr.proto.runtime.v1;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
//import "proto/common/v1/common.proto";
import "google/protobuf/struct.proto";

option csharp_namespace = "Dapr.Client.Autogen.Grpc.v1";
option java_outer_classname = "DaprProtos";
option java_package = "io.dapr.v1";
option go_package = "github.com/dapr-wasm/dapr/pkg/proto/runtime/v1;runtime";

// Dapr service provides APIs to user application to access Dapr building blocks.
// go:plugin type=host
service Dapr {
  // Invokes a method on a remote Dapr app.
  // Deprecated: Use proxy mode service invocation instead.
  rpc InvokeService(InvokeServiceRequest) returns (common.v1.InvokeResponse) {}

  // Gets the state for a specific key.
  rpc GetState(GetStateRequest) returns (GetStateResponse) {}

  // Gets a bulk of state items for a list of keys
  rpc GetBulkState(GetBulkStateRequest) returns (GetBulkStateResponse) {}

  // Saves the state for a specific key.
  rpc SaveState(SaveStateRequest) returns (google.protobuf.Empty) {}

  // Queries the state.
  rpc QueryStateAlpha1(QueryStateRequest) returns (QueryStateResponse) {}

  // Deletes the state for a specific key.
  rpc DeleteState(DeleteStateRequest) returns (google.protobuf.Empty) {}

  // Deletes a bulk of state items for a list of keys
  rpc DeleteBulkState(DeleteBulkStateRequest) returns (google.protobuf.Empty) {}

  // Executes transactions for a specified store
  rpc ExecuteStateTransaction(ExecuteStateTransactionRequest) returns (google.protobuf.Empty) {}

  // Publishes events to the specific topic.
  rpc PublishEvent(PublishEventRequest) returns (google.protobuf.Empty) {}

  // Bulk Publishes multiple events to the specified topic.
  rpc BulkPublishEventAlpha1(BulkPublishRequest) returns (BulkPublishResponse) {}

  // Invokes binding data to specific output bindings
  rpc InvokeBinding(InvokeBindingRequest) returns (InvokeBindingResponse) {}

  // Gets secrets from secret stores.
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {}

  // Gets a bulk of secrets
  rpc GetBulkSecret(GetBulkSecretRequest) returns (GetBulkSecretResponse) {}

  // Register an actor timer.
  rpc RegisterActorTimer(RegisterActorTimerRequest) returns (google.protobuf.Empty) {}

  // Unregister an actor timer.
  rpc UnregisterActorTimer(UnregisterActorTimerRequest) returns (google.protobuf.Empty) {}

  // Register an actor reminder.
  rpc RegisterActorReminder(RegisterActorReminderRequest) returns (google.protobuf.Empty) {}

  // Unregister an actor reminder.
  rpc UnregisterActorReminder(UnregisterActorReminderRequest) returns (google.protobuf.Empty) {}

  // Rename an actor reminder.
  rpc RenameActorReminder(RenameActorReminderRequest) returns (google.protobuf.Empty) {}

  // Gets the state for a specific actor.
  rpc GetActorState(GetActorStateRequest) returns (GetActorStateResponse) {}

  // Executes state transactions for a specified actor
  rpc ExecuteActorStateTransaction(ExecuteActorStateTransactionRequest) returns (google.protobuf.Empty) {}

  // InvokeActor calls a method on an actor.
  rpc InvokeActor (InvokeActorRequest) returns (InvokeActorResponse) {}

  // GetConfiguration gets configuration from configuration store.
  rpc GetConfigurationAlpha1(GetConfigurationRequest) returns (GetConfigurationResponse) {}

  // SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
  rpc SubscribeConfigurationAlpha1(SubscribeConfigurationRequest) returns (stream SubscribeConfigurationResponse) {}

  // UnSubscribeConfiguration unsubscribe the subscription of configuration
  rpc UnsubscribeConfigurationAlpha1(UnsubscribeConfigurationRequest) returns (UnsubscribeConfigurationResponse) {}

  // TryLockAlpha1 tries to get a lock with an expiry.
  rpc TryLockAlpha1(TryLockRequest)returns (TryLockResponse) {}

  // UnlockAlpha1 unlocks a lock.
  rpc UnlockAlpha1(UnlockRequest)returns (UnlockResponse) {}

  // Gets metadata of the sidecar
  rpc GetMetadata (google.protobuf.Empty) returns (GetMetadataResponse) {}

  // Sets value in extended metadata of the sidecar
  rpc SetMetadata (SetMetadataRequest) returns (google.protobuf.Empty) {}

  // Start Workflow
  rpc StartWorkflowAlpha1 (StartWorkflowRequest) returns (WorkflowReference) {}

  // Get Workflow details
  rpc GetWorkflowAlpha1 (GetWorkflowRequest) returns (GetWorkflowResponse) {}

  // Terminate Workflow
  rpc TerminateWorkflowAlpha1 (TerminateWorkflowRequest) returns (TerminateWorkflowResponse) {}

  // Shutdown the sidecar
  rpc Shutdown (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// InvokeServiceRequest represents the request message for Service invocation.
message InvokeServiceRequest {
  // Required. Callee's app id.
  string id = 1;

  // Required. message which will be delivered to callee.
  common.v1.InvokeRequest message = 3;
}

// GetStateRequest is the message to get key-value states from specific state store.
message GetStateRequest {
  // The name of state store.
  string store_name = 1;

  // The key of the desired state
  string key = 2;

  // The read consistency of the state store.
  common.v1.StateOptions.StateConsistency consistency = 3;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 4;
}

// GetBulkStateRequest is the message to get a list of key-value states from specific state store.
message GetBulkStateRequest {
  // The name of state store.
  string store_name = 1;

  // The keys to get.
  repeated string keys = 2;

  // The number of parallel operations executed on the state store for a get operation.
  int32 parallelism = 3;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 4;
}

// GetBulkStateResponse is the response conveying the list of state values.
message GetBulkStateResponse {
  // The list of items containing the keys to get values for.
  repeated BulkStateItem items = 1;
}

// BulkStateItem is the response item for a bulk get operation.
// Return values include the item key, data and etag.
message BulkStateItem {
  // state item key
  string key = 1;

  // The byte array data
  bytes data = 2;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 3;

  // The error that was returned from the state store in case of a failed get operation.
  string error = 4;

  // The metadata which will be sent to app.
  map<string, string> metadata = 5;
}

// GetStateResponse is the response conveying the state value and etag.
message GetStateResponse {
  // The byte array data
  bytes data = 1;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 2;

  // The metadata which will be sent to app.
  map<string, string> metadata = 3;
}

// DeleteStateRequest is the message to delete key-value states in the specific state store.
message DeleteStateRequest {
  // The name of state store.
  string store_name = 1;

  // The key of the desired state
  string key = 2;

  // The entity tag which represents the specific version of data.
  // The exact ETag format is defined by the corresponding data store.
  common.v1.Etag etag = 3;

  // State operation options which includes concurrency/
  // consistency/retry_policy.
  common.v1.StateOptions options = 4;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 5;
}

// DeleteBulkStateRequest is the message to delete a list of key-value states from specific state store.
message DeleteBulkStateRequest {
  // The name of state store.
  string store_name = 1;

  // The array of the state key values.
  repeated common.v1.StateItem states = 2;
}

// SaveStateRequest is the message to save multiple states into state store.
message SaveStateRequest {
  // The name of state store.
  string store_name = 1;

  // The array of the state key values.
  repeated common.v1.StateItem states = 2;
}

// QueryStateRequest is the message to query state store.
message QueryStateRequest {
  // The name of state store.
  string store_name = 1;

  // The query in JSON format.
  string query = 2;

  // The metadata which will be sent to state store components.
  map<string, string> metadata = 3;
}

message QueryStateItem {
  // The object key.
  string key = 1;

  // The object value.
  bytes  data = 2;

  // The entity tag which represents the specific version of data.
  // ETag format is defined by the corresponding data store.
  string etag = 3;

  // The error message indicating an error in processing of the query result.
  string error = 4;
}

// QueryStateResponse is the response conveying the query results.
message QueryStateResponse {
  // An array of query results.
  repeated QueryStateItem results = 1;

  // Pagination token.
  string token = 2;

  // The metadata which will be sent to app.
  map<string, string> metadata = 3;
}

// PublishEventRequest is the message to publish event data to pubsub topic
message PublishEventRequest {
  // The name of the pubsub component
  string pubsub_name = 1;

  // The pubsub topic
  string topic = 2;

  // The data which will be published to topic.
  bytes data = 3;

  // The content type for the data (optional).
  string data_content_type = 4;

  // The metadata passing to pub components
  //
  // metadata property:
  // - key : the key of the message.
  map<string, string> metadata = 5;
}

// BulkPublishRequest is the message to bulk publish events to pubsub topic
message BulkPublishRequest {
  // The name of the pubsub component
  string pubsub_name = 1;

  // The pubsub topic
  string topic = 2;

  // The entries which contain the individual events and associated details to be published
  repeated BulkPublishRequestEntry entries = 3;

  // The request level metadata passing to to the pubsub components
  map<string, string> metadata = 4;
}

// BulkPublishRequestEntry is the message containing the event to be bulk published
message BulkPublishRequestEntry {
  // The request scoped unique ID referring to this message. Used to map status in response
  string entry_id = 1;

  // The event which will be pulished to the topic
  bytes event = 2;

  // The content type for the event
  string content_type = 3;

  // The event level metadata passing to the pubsub component
  map<string, string> metadata = 4;
}

// BulkPublishResponse is the message returned from a BulkPublishEvent call
message BulkPublishResponse {
  // The entries for different events that failed publish in the BulkPublishEvent call
  repeated BulkPublishResponseFailedEntry failedEntries = 1;
}

// BulkPublishResponseFailedEntry is the message containing the entryID and error of a failed event in BulkPublishEvent call
message BulkPublishResponseFailedEntry {

  // The response scoped unique ID referring to this message
  string entry_id = 1;

  // The error message if any on failure
  string error = 2;
}


// InvokeBindingRequest is the message to send data to output bindings
message InvokeBindingRequest {
  // The name of the output binding to invoke.
  string name = 1;

  // The data which will be sent to output binding.
  bytes data = 2;

  // The metadata passing to output binding components
  //
  // Common metadata property:
  // - ttlInSeconds : the time to live in seconds for the message.
  // If set in the binding definition will cause all messages to
  // have a default time to live. The message ttl overrides any value
  // in the binding definition.
  map<string, string> metadata = 3;

  // The name of the operation type for the binding to invoke
  string operation = 4;
}

// InvokeBindingResponse is the message returned from an output binding invocation
message InvokeBindingResponse {
  // The data which will be sent to output binding.
  bytes data = 1;

  // The metadata returned from an external system
  map<string, string> metadata = 2;
}

// GetSecretRequest is the message to get secret from secret store.
message GetSecretRequest {
  // The name of secret store.
  string store_name = 1 [json_name = "storeName"];

  // The name of secret key.
  string key = 2;

  // The metadata which will be sent to secret store components.
  map<string, string> metadata = 3;
}

// GetSecretResponse is the response message to convey the requested secret.
message GetSecretResponse {
  // data is the secret value. Some secret store, such as kubernetes secret
  // store, can save multiple secrets for single secret key.
  map<string, string> data = 1;
}

// GetBulkSecretRequest is the message to get the secrets from secret store.
message GetBulkSecretRequest {
  // The name of secret store.
  string store_name = 1 [json_name = "storeName"];

  // The metadata which will be sent to secret store components.
  map<string, string> metadata = 2;
}

// SecretResponse is a map of decrypted string/string values
message SecretResponse {
  map<string, string> secrets = 1;
}

// GetBulkSecretResponse is the response message to convey the requested secrets.
message GetBulkSecretResponse {
  // data hold the secret values. Some secret store, such as kubernetes secret
  // store, can save multiple secrets for single secret key.
  map<string, SecretResponse> data = 1;
}

// TransactionalStateOperation is the message to execute a specified operation with a key-value pair.
message TransactionalStateOperation {
  // The type of operation to be executed
  string operationType = 1;

  // State values to be operated on
  common.v1.StateItem request = 2;
}

// ExecuteStateTransactionRequest is the message to execute multiple operations on a specified store.
message ExecuteStateTransactionRequest {
  // Required. name of state store.
  string storeName = 1;

  // Required. transactional operation list.
  repeated TransactionalStateOperation operations = 2;

  // The metadata used for transactional operations.
  map<string, string> metadata = 3;
}

// RegisterActorTimerRequest is the message to register a timer for an actor of a given type and id.
message RegisterActorTimerRequest {
  string actor_type = 1;
  string actor_id = 2;
  string name = 3;
  string due_time = 4;
  string period = 5;
  string callback = 6;
  bytes  data = 7;
  string ttl = 8;
}

// UnregisterActorTimerRequest is the message to unregister an actor timer
message UnregisterActorTimerRequest {
  string actor_type = 1;
  string actor_id = 2;
  string name = 3;
}

// RegisterActorReminderRequest is the message to register a reminder for an actor of a given type and id.
message RegisterActorReminderRequest {
  string actor_type = 1;
  string actor_id = 2;
  string name = 3;
  string due_time = 4;
  string period = 5;
  bytes  data = 6;
  string ttl = 7;
}

// UnregisterActorReminderRequest is the message to unregister an actor reminder.
message UnregisterActorReminderRequest {
  string actor_type = 1;
  string actor_id = 2;
  string name = 3;
}

// RenameActorReminderRequest is the message to rename an actor reminder.
message RenameActorReminderRequest {
  string actor_type = 1;
  string actor_id = 2;
  string old_name = 3;
  string new_name = 4;
}

// GetActorStateRequest is the message to get key-value states from specific actor.
message GetActorStateRequest {
  string actor_type = 1;
  string actor_id = 2;
  string key = 3;
}

// GetActorStateResponse is the response conveying the actor's state value.
message GetActorStateResponse {
  bytes data = 1;
}

// ExecuteActorStateTransactionRequest is the message to execute multiple operations on a specified actor.
message ExecuteActorStateTransactionRequest {
  string actor_type = 1;
  string actor_id = 2;
  repeated TransactionalActorStateOperation operations = 3;
}

// TransactionalActorStateOperation is the message to execute a specified operation with a key-value pair.
message TransactionalActorStateOperation {
  string operationType = 1;
  string key = 2;
  google.protobuf.Any value = 3;
}

// InvokeActorRequest is the message to call an actor.
message InvokeActorRequest {
  string actor_type = 1;
  string actor_id = 2;
  string method = 3;
  bytes  data = 4;
  map<string, string> metadata = 5;
}

// InvokeActorResponse is the method that returns an actor invocation response.
message InvokeActorResponse {
  bytes data = 1;
}

// GetMetadataResponse is a message that is returned on GetMetadata rpc call
message GetMetadataResponse {
  string id = 1;
  repeated ActiveActorsCount active_actors_count = 2;
  repeated RegisteredComponents registered_components = 3;
  map<string, string> extended_metadata = 4;
  repeated PubsubSubscription subscriptions = 5;
}

message ActiveActorsCount {
  string type = 1;
  int32 count = 2;
}

message RegisteredComponents {
  string name = 1;
  string type = 2;
  string version = 3;
  repeated string capabilities = 4;
}

message PubsubSubscription {
  string pubsub_name = 1;
  string topic = 2;
  map<string,string> metadata = 3;
  PubsubSubscriptionRules rules = 4;
  string dead_letter_topic = 5;
}

message PubsubSubscriptionRules {
  repeated PubsubSubscriptionRule rules = 1;
}

message PubsubSubscriptionRule {
  string match = 1;
  string path = 2;
}

message SetMetadataRequest {
  string key = 1;
  string value = 2;
}

// GetConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message GetConfigurationRequest {
  // Required. The name of configuration store.
  string store_name = 1;

  // Optional. The key of the configuration item to fetch.
  // If set, only query for the specified configuration items.
  // Empty list means fetch all.
  repeated string keys = 2;

  // Optional. The metadata which will be sent to configuration store components.
  map<string, string> metadata = 3;
}

// GetConfigurationResponse is the response conveying the list of configuration values.
// It should be the FULL configuration of specified application which contains all of its configuration items.
message GetConfigurationResponse {
  map<string, common.v1.ConfigurationItem> items = 1;
}

// SubscribeConfigurationRequest is the message to get a list of key-value configuration from specified configuration store.
message SubscribeConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // Optional. The key of the configuration item to fetch.
  // If set, only query for the specified configuration items.
  // Empty list means fetch all.
  repeated string keys = 2;

  // The metadata which will be sent to configuration store components.
  map<string, string> metadata = 3;
}

// UnSubscribeConfigurationRequest is the message to stop watching the key-value configuration.
message UnsubscribeConfigurationRequest {
  // The name of configuration store.
  string store_name = 1;

  // The id to unsubscribe.
  string id = 2;
}

message SubscribeConfigurationResponse {
  // Subscribe id, used to stop subscription.
  string id = 1;

  // The list of items containing configuration values
  map<string, common.v1.ConfigurationItem> items = 2;
}

message UnsubscribeConfigurationResponse {
  bool ok = 1;
  string message = 2;
}

message TryLockRequest {
  // Required. The lock store name,e.g. `redis`.
  string store_name = 1;

  // Required. resource_id is the lock key. e.g. `order_id_111`
  // It stands for "which resource I want to protect"
  string resource_id = 2;

  // Required. lock_owner indicate the identifier of lock owner.
  // You can generate a uuid as lock_owner.For example,in golang:
  //
  // req.LockOwner = uuid.New().String()
  //
  // This field is per request,not per process,so it is different for each request,
  // which aims to prevent multi-thread in the same process trying the same lock concurrently.
  //
  // The reason why we don't make it automatically generated is:
  // 1. If it is automatically generated,there must be a 'my_lock_owner_id' field in the response.
  // This name is so weird that we think it is inappropriate to put it into the api spec
  // 2. If we change the field 'my_lock_owner_id' in the response to 'lock_owner',which means the current lock owner of this lock,
  // we find that in some lock services users can't get the current lock owner.Actually users don't need it at all.
  // 3. When reentrant lock is needed,the existing lock_owner is required to identify client and check "whether this client can reenter this lock".
  // So this field in the request shouldn't be removed.
  string lock_owner = 3;

  // Required. The time before expiry.The time unit is second.
  int32 expiryInSeconds = 4;
}


message TryLockResponse {

  bool success = 1;
}

message UnlockRequest {
  string store_name = 1;
  // resource_id is the lock key.
  string resource_id = 2;

  string lock_owner = 3;
}

message UnlockResponse {
  enum Status {
    SUCCESS = 0;
    LOCK_DOES_NOT_EXIST = 1;
    LOCK_BELONGS_TO_OTHERS = 2;
    INTERNAL_ERROR = 3;
  }

  Status status = 1;
}

message WorkflowReference {
  string instance_id = 1;
}

message GetWorkflowRequest {
  string instance_id  = 1;
  string workflow_type = 2;
  string workflow_component = 3;
}

message GetWorkflowResponse {
  string instance_id = 1;
  int64 start_time = 2;
  map<string, string> metadata = 3;
}

message StartWorkflowRequest {
  string instance_id = 1;
  string workflow_component = 2;
  string workflow_name = 3;
  map<string, string> options = 4;
  bytes input = 5;
}

message TerminateWorkflowRequest {
  string instance_id = 1;
  string workflow_component = 2;
}

message TerminateWorkflowResponse {
}





// ======================================

// AppCallback V1 allows user application to interact with Dapr runtime.
// User application needs to implement AppCallback service if it needs to
// receive message from dapr runtime.
// go:plugin type=plugin version=1
service AppCallback {
  // Invokes service method with InvokeRequest.
  rpc OnInvoke (common.v1.InvokeRequest) returns (common.v1.InvokeResponse) {}

  // Lists all topics subscribed by this app.
  rpc ListTopicSubscriptions(google.protobuf.Empty) returns (ListTopicSubscriptionsResponse) {}

  // Subscribes events from Pubsub
  rpc OnTopicEvent(TopicEventRequest) returns (TopicEventResponse) {}

  // Lists all input bindings subscribed by this app.
  rpc ListInputBindings(google.protobuf.Empty) returns (ListInputBindingsResponse) {}

  // Listens events from the input bindings
  //
  // User application can save the states or send the events to the output
  // bindings optionally by returning BindingEventResponse.
  rpc OnBindingEvent(BindingEventRequest) returns (BindingEventResponse) {}
}

// AppCallbackHealthCheck V1 is an optional extension to AppCallback V1 to implement
// the HealthCheck method.
service AppCallbackHealthCheck {
  // Health check.
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse) {}
}

// AppCallbackAlpha V1 is an optional extension to AppCallback V1 to opt
// for Alpha RPCs.
service AppCallbackAlpha {
  // Subscribes bulk events from Pubsub
  rpc OnBulkTopicEventAlpha1(TopicEventBulkRequest) returns (TopicEventBulkResponse) {}
}

// TopicEventRequest message is compatible with CloudEvent spec v1.0
// https://github.com/cloudevents/spec/blob/v1.0/spec.md
message TopicEventRequest {
  // id identifies the event. Producers MUST ensure that source + id
  // is unique for each distinct event. If a duplicate event is re-sent
  // (e.g. due to a network error) it MAY have the same id.
  string id = 1;

  // source identifies the context in which an event happened.
  // Often this will include information such as the type of the
  // event source, the organization publishing the event or the process
  // that produced the event. The exact syntax and semantics behind
  // the data encoded in the URI is defined by the event producer.
  string source = 2;

  // The type of event related to the originating occurrence.
  string type = 3;

  // The version of the CloudEvents specification.
  string spec_version = 4;

  // The content type of data value.
  string data_content_type = 5;

  // The content of the event.
  bytes data = 7;

  // The pubsub topic which publisher sent to.
  string topic = 6;

  // The name of the pubsub the publisher sent to.
  string pubsub_name = 8;

  // The matching path from TopicSubscription/routes (if specified) for this event.
  // This value is used by OnTopicEvent to "switch" inside the handler.
  string path = 9;

  // The map of additional custom properties to be sent to the app. These are considered to be cloud event extensions.
  google.protobuf.Struct extensions = 10;
}

// TopicEventResponse is response from app on published message
message TopicEventResponse {
  // TopicEventResponseStatus allows apps to have finer control over handling of the message.
  enum TopicEventResponseStatus {
    // SUCCESS is the default behavior: message is acknowledged and not retried or logged.
    SUCCESS = 0;
    // RETRY status signals Dapr to retry the message as part of an expected scenario (no warning is logged).
    RETRY = 1;
    // DROP status signals Dapr to drop the message as part of an unexpected scenario (warning is logged).
    DROP = 2;
  }

  // The list of output bindings.
  TopicEventResponseStatus status = 1;
}

// TopicEventCERequest message is compatible with CloudEvent spec v1.0
message TopicEventCERequest {
  // The unique identifier of this cloud event.
  string id = 1;

  // source identifies the context in which an event happened.
  string source = 2;

  // The type of event related to the originating occurrence.
  string type = 3;

  // The version of the CloudEvents specification.
  string spec_version = 4;

  // The content type of data value.
  string data_content_type = 5;

  // The content of the event.
  bytes data = 6;

  // Custom attributes which includes cloud event extensions.
  google.protobuf.Struct extensions = 7;
}

// TopicEventBulkRequestEntry represents a single message inside a bulk request
message TopicEventBulkRequestEntry {
  // Unique identifier for the message.
  string entry_id = 1;

  // The content of the event.
  oneof event {
    bytes bytes = 2;
    TopicEventCERequest cloud_event = 3;
  }

  // content type of the event contained.
  string content_type = 4;

  // The metadata associated with the event.
  map<string,string> metadata = 5;
}

// TopicEventBulkRequest represents request for bulk message
message TopicEventBulkRequest {
  // Unique identifier for the bulk request.
  string id = 1;

  // The list of items inside this bulk request.
  repeated TopicEventBulkRequestEntry entries = 2;

  // The metadata associated with the this bulk request.
  map<string,string> metadata = 3;

  // The pubsub topic which publisher sent to.
  string topic = 4;

  // The name of the pubsub the publisher sent to.
  string pubsub_name = 5;

  // The type of event related to the originating occurrence.
  string type = 6;

  // The matching path from TopicSubscription/routes (if specified) for this event.
  // This value is used by OnTopicEvent to "switch" inside the handler.
  string path = 7;
}

// TopicEventBulkResponseEntry Represents single response, as part of TopicEventBulkResponse, to be
// sent by subscibed App for the corresponding single message during bulk subscribe
message TopicEventBulkResponseEntry {
  // Unique identifier associated the message.
  string entry_id = 1;

  // The status of the response.
  TopicEventResponse.TopicEventResponseStatus status = 2;
}

// AppBulkResponse is response from app on published message
message TopicEventBulkResponse {

  // The list of all responses for the bulk request.
  repeated TopicEventBulkResponseEntry statuses = 1;
}

// BindingEventRequest represents input bindings event.
message BindingEventRequest {
  // Required. The name of the input binding component.
  string name = 1;

  // Required. The payload that the input bindings sent
  bytes data = 2;

  // The metadata set by the input binging components.
  map<string,string> metadata = 3;
}

// BindingEventResponse includes operations to save state or
// send data to output bindings optionally.
message BindingEventResponse {
  // The name of state store where states are saved.
  string store_name = 1;

  // The state key values which will be stored in store_name.
  repeated common.v1.StateItem states = 2;

  // BindingEventConcurrency is the kind of concurrency
  enum BindingEventConcurrency {
    // SEQUENTIAL sends data to output bindings specified in "to" sequentially.
    SEQUENTIAL = 0;
    // PARALLEL sends data to output bindings specified in "to" in parallel.
    PARALLEL = 1;
  }

  // The list of output bindings.
  repeated string to = 3;

  // The content which will be sent to "to" output bindings.
  bytes data = 4;

  // The concurrency of output bindings to send data to
  // "to" output bindings list. The default is SEQUENTIAL.
  BindingEventConcurrency concurrency = 5;
}

// ListTopicSubscriptionsResponse is the message including the list of the subscribing topics.
message ListTopicSubscriptionsResponse {
  // The list of topics.
  repeated TopicSubscription subscriptions = 1;
}

// TopicSubscription represents topic and metadata.
message TopicSubscription {
  // Required. The name of the pubsub containing the topic below to subscribe to.
  string pubsub_name = 1;

  // Required. The name of topic which will be subscribed
  string topic = 2;

  // The optional properties used for this topic's subscription e.g. session id
  map<string,string> metadata = 3;

  // The optional routing rules to match against. In the gRPC interface, OnTopicEvent
  // is still invoked but the matching path is sent in the TopicEventRequest.
  TopicRoutes routes = 5;

  // The optional dead letter queue for this topic to send events to.
  string dead_letter_topic = 6;

  // The optional bulk subscribe settings for this topic.
  BulkSubscribeConfig bulk_subscribe = 7;
}

message TopicRoutes {
  // The list of rules for this topic.
  repeated TopicRule rules = 1;

  // The default path for this topic.
  string default = 2;
}

message TopicRule {
  // The optional CEL expression used to match the event.
  // If the match is not specified, then the route is considered
  // the default.
  string match = 1;

  // The path used to identify matches for this subscription.
  // This value is passed in TopicEventRequest and used by OnTopicEvent to "switch"
  // inside the handler.
  string path = 2;
}

// BulkSubscribeConfig is the message to pass settings for bulk subscribe
message BulkSubscribeConfig {
  // Required. Flag to enable/disable bulk subscribe
  bool enabled = 1;

  // Optional. Max number of messages to be sent in a single bulk request
  int32 max_messages_count = 2;

  // Optional. Max duration to wait for messages to be sent in a single bulk request
  int32 max_await_duration_ms  = 3;
}

// ListInputBindingsResponse is the message including the list of input bindings.
message ListInputBindingsResponse {
  // The list of input bindings.
  repeated string bindings = 1;
}

// HealthCheckResponse is the message with the response to the health check.
// This message is currently empty as used as placeholder.
message HealthCheckResponse {}


// -------- common -------------

// HTTPExtension includes HTTP verb and querystring
// when Dapr runtime delivers HTTP content.
//
// For example, when callers calls http invoke api
// POST http://localhost:3500/v1.0/invoke/<app_id>/method/<method>?query1=value1&query2=value2
//
// Dapr runtime will parse POST as a verb and extract querystring to quersytring map.
message HTTPExtension {
  // Type of HTTP 1.1 Methods
  // RFC 7231: https://tools.ietf.org/html/rfc7231#page-24
  // RFC 5789: https://datatracker.ietf.org/doc/html/rfc5789
  enum Verb {
    NONE = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    DELETE = 5;
    CONNECT = 6;
    OPTIONS = 7;
    TRACE = 8;
    PATCH = 9;
  }

  // Required. HTTP verb.
  Verb verb = 1;

  // Optional. querystring represents an encoded HTTP url query string in the following format: name=value&name2=value2
  string querystring = 2;
}

// InvokeRequest is the message to invoke a method with the data.
// This message is used in InvokeService of Dapr gRPC Service and OnInvoke
// of AppCallback gRPC service.
message InvokeRequest {
  // Required. method is a method name which will be invoked by caller.
  string method = 1;

  // Required in unary RPCs. Bytes value or Protobuf message which caller sent.
  // Dapr treats Any.value as bytes type if Any.type_url is unset.
  google.protobuf.Any data = 2;

  // The type of data content.
  //
  // This field is required if data delivers http request body
  // Otherwise, this is optional.
  string content_type = 3;

  // HTTP specific fields if request conveys http-compatible request.
  //
  // This field is required for http-compatible request. Otherwise,
  // this field is optional.
  HTTPExtension http_extension = 4;
}

// InvokeResponse is the response message inclduing data and its content type
// from app callback.
// This message is used in InvokeService of Dapr gRPC Service and OnInvoke
// of AppCallback gRPC service.
message InvokeResponse {
  // Required in unary RPCs. The content body of InvokeService response.
  google.protobuf.Any data = 1;

  // Required. The type of data content.
  string content_type = 2;
}

// Chunk of data sent in a streaming request or response.
// This is used in requests including InternalInvokeRequestStream.
message StreamPayload {
  // Data sent in the chunk.
  // The amount of data included in each chunk is up to the discretion of the sender, and can be empty.
  // Additionally, the amount of data doesn't need to be fixed and subsequent messages can send more, or less, data.
  // Receivers must not make assumptions about the number of bytes they'll receive in each chunk.
  bytes data = 1;

  // Sequence number. This is a counter that starts from 0 and increments by 1 on each chunk sent.
  uint32 seq = 2;
}

// StateItem represents state key, value, and additional options to save state.
message StateItem {
  // Required. The state key
  string key = 1;

  // Required. The state data for key
  bytes value = 2;

  // The entity tag which represents the specific version of data.
  // The exact ETag format is defined by the corresponding data store.
  Etag etag = 3;

  // The metadata which will be passed to state store component.
  map<string,string> metadata = 4;

  // Options for concurrency and consistency to save the state.
  StateOptions options = 5;
}

// Etag represents a state item version
message Etag {
  // value sets the etag value
  string value = 1;
}

// StateOptions configures concurrency and consistency for state operations
message StateOptions {
  // Enum describing the supported concurrency for state.
  enum StateConcurrency {
    CONCURRENCY_UNSPECIFIED = 0;
    CONCURRENCY_FIRST_WRITE = 1;
    CONCURRENCY_LAST_WRITE = 2;
  }

  // Enum describing the supported consistency for state.
  enum StateConsistency {
    CONSISTENCY_UNSPECIFIED = 0;
    CONSISTENCY_EVENTUAL = 1;
    CONSISTENCY_STRONG = 2;
  }

  StateConcurrency concurrency = 1;
  StateConsistency consistency = 2;
}

// ConfigurationItem represents all the configuration with its name(key).
message ConfigurationItem {
  // Required. The value of configuration item.
  string value = 1;

  // Version is response only and cannot be fetched. Store is not expected to keep all versions available
  string version = 2;

  // the metadata which will be passed to/from configuration store component.
  map<string,string> metadata = 3;
}
