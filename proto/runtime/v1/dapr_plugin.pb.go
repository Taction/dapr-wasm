//go:build tinygo.wasm

//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.1
// source: proto/runtime/v1/dapr.proto

package runtime

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
)

const AppCallbackPluginAPIVersion = 1

//export app_callback_api_version
func _app_callback_api_version() uint64 {
	return AppCallbackPluginAPIVersion
}

var appCallback AppCallback

func RegisterAppCallback(p AppCallback) {
	appCallback = p
}

//export app_callback_on_invoke
func _app_callback_on_invoke(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req InvokeRequest
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := appCallback.OnInvoke(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export app_callback_list_topic_subscriptions
func _app_callback_list_topic_subscriptions(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := appCallback.ListTopicSubscriptions(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export app_callback_on_topic_event
func _app_callback_on_topic_event(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req TopicEventRequest
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := appCallback.OnTopicEvent(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export app_callback_list_input_bindings
func _app_callback_list_input_bindings(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := appCallback.ListInputBindings(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export app_callback_on_binding_event
func _app_callback_on_binding_event(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req BindingEventRequest
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := appCallback.OnBindingEvent(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type dapr struct{}

func NewDapr() Dapr {
	return dapr{}
}

//go:wasm-module env
//export invoke_service
func _invoke_service(ptr uint32, size uint32) uint64

func (h dapr) InvokeService(ctx context.Context, request InvokeServiceRequest) (response InvokeResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _invoke_service(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_state
func _get_state(ptr uint32, size uint32) uint64

func (h dapr) GetState(ctx context.Context, request GetStateRequest) (response GetStateResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_state(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_bulk_state
func _get_bulk_state(ptr uint32, size uint32) uint64

func (h dapr) GetBulkState(ctx context.Context, request GetBulkStateRequest) (response GetBulkStateResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_bulk_state(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export save_state
func _save_state(ptr uint32, size uint32) uint64

func (h dapr) SaveState(ctx context.Context, request SaveStateRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _save_state(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export query_state_alpha1
func _query_state_alpha1(ptr uint32, size uint32) uint64

func (h dapr) QueryStateAlpha1(ctx context.Context, request QueryStateRequest) (response QueryStateResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _query_state_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export delete_state
func _delete_state(ptr uint32, size uint32) uint64

func (h dapr) DeleteState(ctx context.Context, request DeleteStateRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _delete_state(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export delete_bulk_state
func _delete_bulk_state(ptr uint32, size uint32) uint64

func (h dapr) DeleteBulkState(ctx context.Context, request DeleteBulkStateRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _delete_bulk_state(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export execute_state_transaction
func _execute_state_transaction(ptr uint32, size uint32) uint64

func (h dapr) ExecuteStateTransaction(ctx context.Context, request ExecuteStateTransactionRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _execute_state_transaction(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export publish_event
func _publish_event(ptr uint32, size uint32) uint64

func (h dapr) PublishEvent(ctx context.Context, request PublishEventRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _publish_event(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export bulk_publish_event_alpha1
func _bulk_publish_event_alpha1(ptr uint32, size uint32) uint64

func (h dapr) BulkPublishEventAlpha1(ctx context.Context, request BulkPublishRequest) (response BulkPublishResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _bulk_publish_event_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export invoke_binding
func _invoke_binding(ptr uint32, size uint32) uint64

func (h dapr) InvokeBinding(ctx context.Context, request InvokeBindingRequest) (response InvokeBindingResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _invoke_binding(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_secret
func _get_secret(ptr uint32, size uint32) uint64

func (h dapr) GetSecret(ctx context.Context, request GetSecretRequest) (response GetSecretResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_secret(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_bulk_secret
func _get_bulk_secret(ptr uint32, size uint32) uint64

func (h dapr) GetBulkSecret(ctx context.Context, request GetBulkSecretRequest) (response GetBulkSecretResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_bulk_secret(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export register_actor_timer
func _register_actor_timer(ptr uint32, size uint32) uint64

func (h dapr) RegisterActorTimer(ctx context.Context, request RegisterActorTimerRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _register_actor_timer(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export unregister_actor_timer
func _unregister_actor_timer(ptr uint32, size uint32) uint64

func (h dapr) UnregisterActorTimer(ctx context.Context, request UnregisterActorTimerRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _unregister_actor_timer(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export register_actor_reminder
func _register_actor_reminder(ptr uint32, size uint32) uint64

func (h dapr) RegisterActorReminder(ctx context.Context, request RegisterActorReminderRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _register_actor_reminder(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export unregister_actor_reminder
func _unregister_actor_reminder(ptr uint32, size uint32) uint64

func (h dapr) UnregisterActorReminder(ctx context.Context, request UnregisterActorReminderRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _unregister_actor_reminder(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export rename_actor_reminder
func _rename_actor_reminder(ptr uint32, size uint32) uint64

func (h dapr) RenameActorReminder(ctx context.Context, request RenameActorReminderRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _rename_actor_reminder(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_actor_state
func _get_actor_state(ptr uint32, size uint32) uint64

func (h dapr) GetActorState(ctx context.Context, request GetActorStateRequest) (response GetActorStateResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_actor_state(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export execute_actor_state_transaction
func _execute_actor_state_transaction(ptr uint32, size uint32) uint64

func (h dapr) ExecuteActorStateTransaction(ctx context.Context, request ExecuteActorStateTransactionRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _execute_actor_state_transaction(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export invoke_actor
func _invoke_actor(ptr uint32, size uint32) uint64

func (h dapr) InvokeActor(ctx context.Context, request InvokeActorRequest) (response InvokeActorResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _invoke_actor(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_configuration_alpha1
func _get_configuration_alpha1(ptr uint32, size uint32) uint64

func (h dapr) GetConfigurationAlpha1(ctx context.Context, request GetConfigurationRequest) (response GetConfigurationResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_configuration_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export subscribe_configuration_alpha1
func _subscribe_configuration_alpha1(ptr uint32, size uint32) uint64

func (h dapr) SubscribeConfigurationAlpha1(ctx context.Context, request SubscribeConfigurationRequest) (response SubscribeConfigurationResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _subscribe_configuration_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export unsubscribe_configuration_alpha1
func _unsubscribe_configuration_alpha1(ptr uint32, size uint32) uint64

func (h dapr) UnsubscribeConfigurationAlpha1(ctx context.Context, request UnsubscribeConfigurationRequest) (response UnsubscribeConfigurationResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _unsubscribe_configuration_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export try_lock_alpha1
func _try_lock_alpha1(ptr uint32, size uint32) uint64

func (h dapr) TryLockAlpha1(ctx context.Context, request TryLockRequest) (response TryLockResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _try_lock_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export unlock_alpha1
func _unlock_alpha1(ptr uint32, size uint32) uint64

func (h dapr) UnlockAlpha1(ctx context.Context, request UnlockRequest) (response UnlockResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _unlock_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_metadata
func _get_metadata(ptr uint32, size uint32) uint64

func (h dapr) GetMetadata(ctx context.Context, request emptypb.Empty) (response GetMetadataResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_metadata(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export set_metadata
func _set_metadata(ptr uint32, size uint32) uint64

func (h dapr) SetMetadata(ctx context.Context, request SetMetadataRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _set_metadata(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export start_workflow_alpha1
func _start_workflow_alpha1(ptr uint32, size uint32) uint64

func (h dapr) StartWorkflowAlpha1(ctx context.Context, request StartWorkflowRequest) (response WorkflowReference, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _start_workflow_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export get_workflow_alpha1
func _get_workflow_alpha1(ptr uint32, size uint32) uint64

func (h dapr) GetWorkflowAlpha1(ctx context.Context, request GetWorkflowRequest) (response GetWorkflowResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_workflow_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export terminate_workflow_alpha1
func _terminate_workflow_alpha1(ptr uint32, size uint32) uint64

func (h dapr) TerminateWorkflowAlpha1(ctx context.Context, request TerminateWorkflowRequest) (response TerminateWorkflowResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _terminate_workflow_alpha1(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export shutdown
func _shutdown(ptr uint32, size uint32) uint64

func (h dapr) Shutdown(ctx context.Context, request emptypb.Empty) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _shutdown(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}
